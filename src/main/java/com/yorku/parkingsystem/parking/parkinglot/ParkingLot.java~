package com.yorku.parkingsystem.parking.parkinglot;

import com.yorku.parkingsystem.parking.ParkingComponent;
import com.yorku.parkingsystem.parking.parkingspot.ParkingSpot;

import java.util.ArrayList;

public class ParkingLot implements ParkingComponent {
    private static int idCounter = 0;
    private final int parkingLotID;
    private final String name;
    private final String location;
    private final int parkingSpotsTotal = 100; // Fixed max capacity
    private int availableParkingSpots;
    private int notAvailableParkingSpots;
    private boolean isEnabled;

    private ArrayList<ParkingComponent> parkingSpots = new ArrayList<>();

    public ParkingLot(String parkingLotName, String location) {
        this.parkingLotID = ++idCounter;
        this.name = parkingLotName;
        this.location = location;
        this.availableParkingSpots = parkingSpotsTotal;
        this.notAvailableParkingSpots = 0;
    }

    public void setIsEnabled(boolean enabled) {
        this.isEnabled = enabled;
    }

    public boolean getIsEnabled() {
        return this.isEnabled;
    }

    @Override
    public String toString() {
        return "ParkingLot{" +
                "ID=" + parkingLotID +
                ", Name='" + name + '\'' +
                ", Location='" + location + '\'' +
                ", TotalSpots=" + parkingSpotsTotal +
                ", AvailableSpots=" + availableParkingSpots +
                ", OccupiedSpots=" + notAvailableParkingSpots +
                '}';
    }

    @Override
    public void shotDetails() {
        System.out.println(this);
        for (ParkingComponent parkingSpot : parkingSpots) {
            parkingSpot.shotDetails();
            System.out.println("====================================");
        }
    }

    public void addParkingSpot(ParkingSpot parkingSpot) {
        if (!isEnabled) {
            System.out.println("Parking lot is not enabled. Cannot add parking spots.");
            return;
        }

        if (notAvailableParkingSpots >= parkingSpotsTotal) {
            throw new IllegalStateException("Cannot add more parking spots. Maximum capacity of 100 reached.");
        }

        parkingSpot.setBelongedToParkingLot(true);
        parkingSpot.setParkingLot(this);

        parkingSpots.add(parkingSpot);
        notAvailableParkingSpots++;
        availableParkingSpots = parkingSpotsTotal - notAvailableParkingSpots;
    }

    public void removeParkingSpot(ParkingSpot parkingSpot) {
        if (!isEnabled) {
            System.out.println("Parking lot is not enabled. Cannot remove parking spots.");
            return;
        }

        if (!parkingSpots.contains(parkingSpot)) {
            System.out.println("The parking spot does not belong to this parking lot.");
            return;
        }

        parkingSpots.remove(parkingSpot);
        parkingSpot.setParkingLot(null);
        parkingSpot.setBelongedToParkingLot(false);

        notAvailableParkingSpots--;
        availableParkingSpots = parkingSpotsTotal - notAvailableParkingSpots;
    }

    public int getAvailableParkingSpots() {
        return availableParkingSpots;
    }

    public int getNotAvailableParkingSpots() {
        return notAvailableParkingSpots;
    }

    public int getParkingLotID() {
        return parkingLotID;
    }

    public int getParkingSpotsTotal() {
        return parkingSpotsTotal;
    }

    public String getLocation() {
        return location;
    }

    public String getName() {
        return name;
    }

    public ArrayList<ParkingComponent> getParkingSpots() {
        return parkingSpots;
    }

    public void setParkingSpots(ArrayList<ParkingComponent> parkingSpots) {
        this.parkingSpots = parkingSpots;
        this.notAvailableParkingSpots = parkingSpots.size();
        this.availableParkingSpots = parkingSpotsTotal - notAvailableParkingSpots;
    }
}
